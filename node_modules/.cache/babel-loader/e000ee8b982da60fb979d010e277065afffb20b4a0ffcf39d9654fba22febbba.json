{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import axios from\"axios\";import SearchBar from\"./SearchBar\";import StockChart from\"./StockChart\";import Parameters from\"./Parameters\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedTicker,setSelectedTicker]=useState(null);const[stockData,setStockData]=useState([]);const[drift,setDrift]=useState(0.0002);const[volatility,setVolatility]=useState(0.05);const[error,setError]=useState(null);// Fetch stock data when the selected ticker changes\nuseEffect(()=>{if(selectedTicker){fetchStockData();}},[selectedTicker]);const fetchStockData=async()=>{try{const response=await axios.get(`http://localhost:5001/api/stock/${selectedTicker}`);setStockData(response.data.prices);setError(null);}catch(err){setError(\"Failed to fetch stock data. Please check the backend server.\");console.error(err);}};const handleParameterUpdate=async(newDrift,newVolatility)=>{try{// Send the updated parameters to the backend\nconst response=await axios.post(`http://localhost:5001/api/stock/${selectedTicker}/parameters`,{drift:newDrift,volatility:newVolatility});// Append the new price to the chart\nconst newPrice=response.data.price;const newTime=new Date().toLocaleTimeString();// Use the current time for the new data point\nsetStockData(prevData=>[...prevData,{time:newTime,price:newPrice}]);// Update the local state with the new parameters\nsetDrift(newDrift);setVolatility(newVolatility);}catch(err){setError(\"Failed to update parameters. Please check the backend server.\");console.error(err);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Real-Time Stock Prices\"}),/*#__PURE__*/_jsx(SearchBar,{onSelectTicker:setSelectedTicker}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\"},children:error}),selectedTicker&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{style:{width:\"100%\",height:\"400px\"},children:/*#__PURE__*/_jsx(StockChart,{data:stockData})}),/*#__PURE__*/_jsx(Parameters,{drift:drift,volatility:volatility,onUpdate:handleParameterUpdate})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","SearchBar","StockChart","Parameters","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","selectedTicker","setSelectedTicker","stockData","setStockData","drift","setDrift","volatility","setVolatility","error","setError","fetchStockData","response","get","data","prices","err","console","handleParameterUpdate","newDrift","newVolatility","post","newPrice","price","newTime","Date","toLocaleTimeString","prevData","time","className","children","onSelectTicker","style","color","width","height","onUpdate"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SearchBar from \"./SearchBar\";\nimport StockChart from \"./StockChart\";\nimport Parameters from \"./Parameters\";\n\nfunction App() {\n  const [selectedTicker, setSelectedTicker] = useState(null);\n  const [stockData, setStockData] = useState([]);\n  const [drift, setDrift] = useState(0.0002);\n  const [volatility, setVolatility] = useState(0.05);\n  const [error, setError] = useState(null);\n\n  // Fetch stock data when the selected ticker changes\n  useEffect(() => {\n    if (selectedTicker) {\n      fetchStockData();\n    }\n  }, [selectedTicker]);\n\n  const fetchStockData = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5001/api/stock/${selectedTicker}`);\n      setStockData(response.data.prices);\n      setError(null);\n    } catch (err) {\n      setError(\"Failed to fetch stock data. Please check the backend server.\");\n      console.error(err);\n    }\n  };\n\n  const handleParameterUpdate = async (newDrift, newVolatility) => {\n    try {\n      // Send the updated parameters to the backend\n      const response = await axios.post(`http://localhost:5001/api/stock/${selectedTicker}/parameters`, {\n        drift: newDrift,\n        volatility: newVolatility,\n      });\n\n      // Append the new price to the chart\n      const newPrice = response.data.price;\n      const newTime = new Date().toLocaleTimeString(); // Use the current time for the new data point\n      setStockData((prevData) => [\n        ...prevData,\n        { time: newTime, price: newPrice },\n      ]);\n\n      // Update the local state with the new parameters\n      setDrift(newDrift);\n      setVolatility(newVolatility);\n    } catch (err) {\n      setError(\"Failed to update parameters. Please check the backend server.\");\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Real-Time Stock Prices</h1>\n      <SearchBar onSelectTicker={setSelectedTicker} />\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      {selectedTicker && (\n        <>\n          <div style={{ width: \"100%\", height: \"400px\" }}>\n            <StockChart data={stockData} />\n          </div>\n          <Parameters\n            drift={drift}\n            volatility={volatility}\n            onUpdate={handleParameterUpdate}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,CAAAC,UAAU,KAAM,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACe,SAAS,CAAEC,YAAY,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGlB,QAAQ,CAAC,MAAM,CAAC,CAC1C,KAAM,CAACmB,UAAU,CAAEC,aAAa,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACqB,KAAK,CAAEC,QAAQ,CAAC,CAAGtB,QAAQ,CAAC,IAAI,CAAC,CAExC;AACAC,SAAS,CAAC,IAAM,CACd,GAAIY,cAAc,CAAE,CAClBU,cAAc,CAAC,CAAC,CAClB,CACF,CAAC,CAAE,CAACV,cAAc,CAAC,CAAC,CAEpB,KAAM,CAAAU,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAtB,KAAK,CAACuB,GAAG,CAAC,mCAAmCZ,cAAc,EAAE,CAAC,CACrFG,YAAY,CAACQ,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAClCL,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAE,MAAOM,GAAG,CAAE,CACZN,QAAQ,CAAC,8DAA8D,CAAC,CACxEO,OAAO,CAACR,KAAK,CAACO,GAAG,CAAC,CACpB,CACF,CAAC,CAED,KAAM,CAAAE,qBAAqB,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,aAAa,GAAK,CAC/D,GAAI,CACF;AACA,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAtB,KAAK,CAAC+B,IAAI,CAAC,mCAAmCpB,cAAc,aAAa,CAAE,CAChGI,KAAK,CAAEc,QAAQ,CACfZ,UAAU,CAAEa,aACd,CAAC,CAAC,CAEF;AACA,KAAM,CAAAE,QAAQ,CAAGV,QAAQ,CAACE,IAAI,CAACS,KAAK,CACpC,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAE;AACjDtB,YAAY,CAAEuB,QAAQ,EAAK,CACzB,GAAGA,QAAQ,CACX,CAAEC,IAAI,CAAEJ,OAAO,CAAED,KAAK,CAAED,QAAS,CAAC,CACnC,CAAC,CAEF;AACAhB,QAAQ,CAACa,QAAQ,CAAC,CAClBX,aAAa,CAACY,aAAa,CAAC,CAC9B,CAAE,MAAOJ,GAAG,CAAE,CACZN,QAAQ,CAAC,+DAA+D,CAAC,CACzEO,OAAO,CAACR,KAAK,CAACO,GAAG,CAAC,CACpB,CACF,CAAC,CAED,mBACEjB,KAAA,QAAK8B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBnC,IAAA,OAAAmC,QAAA,CAAI,wBAAsB,CAAI,CAAC,cAC/BnC,IAAA,CAACJ,SAAS,EAACwC,cAAc,CAAE7B,iBAAkB,CAAE,CAAC,CAC/CO,KAAK,eAAId,IAAA,MAAGqC,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAM,CAAE,CAAAH,QAAA,CAAErB,KAAK,CAAI,CAAC,CAChDR,cAAc,eACbF,KAAA,CAAAF,SAAA,EAAAiC,QAAA,eACEnC,IAAA,QAAKqC,KAAK,CAAE,CAAEE,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,OAAQ,CAAE,CAAAL,QAAA,cAC7CnC,IAAA,CAACH,UAAU,EAACsB,IAAI,CAAEX,SAAU,CAAE,CAAC,CAC5B,CAAC,cACNR,IAAA,CAACF,UAAU,EACTY,KAAK,CAAEA,KAAM,CACbE,UAAU,CAAEA,UAAW,CACvB6B,QAAQ,CAAElB,qBAAsB,CACjC,CAAC,EACF,CACH,EACE,CAAC,CAEV,CAEA,cAAe,CAAAlB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}