{"ast":null,"code":"const options = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    tooltip: {\n      enabled: true,\n      mode: \"index\",\n      intersect: false,\n      backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n      titleColor: \"#fff\",\n      bodyColor: \"#fff\",\n      borderColor: \"#fff\",\n      borderWidth: 1,\n      displayColors: false,\n      callbacks: {\n        title: () => \"\",\n        label: context => {\n          const price = context.raw.toFixed(2);\n          return `$${price}`;\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: \"category\",\n      title: {\n        display: true,\n        text: \"Time\",\n        color: \"#666\",\n        font: {\n          size: 14,\n          weight: \"bold\"\n        },\n        padding: {\n          top: 10,\n          bottom: 10\n        }\n      },\n      grid: {\n        display: false\n      },\n      ticks: {\n        color: \"#666\",\n        font: {\n          size: 12\n        },\n        // Filter the labels to show only every 15 minutes\n        callback: (value, index, values) => {\n          // Assuming the labels are in the format \"HH:MM\"\n          const time = data[index].time;\n          const minutes = parseInt(time.split(\":\")[1], 10);\n          return minutes % 15 === 0 ? time : null;\n        }\n      }\n    },\n    y: {\n      type: \"linear\",\n      title: {\n        display: true,\n        text: \"Price (USD)\",\n        color: \"#666\",\n        font: {\n          size: 14,\n          weight: \"bold\"\n        },\n        padding: {\n          top: 0,\n          bottom: 10\n        }\n      },\n      grid: {\n        color: \"#eee\"\n      },\n      ticks: {\n        color: \"#666\",\n        font: {\n          size: 12\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["options","responsive","maintainAspectRatio","plugins","tooltip","enabled","mode","intersect","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","displayColors","callbacks","title","label","context","price","raw","toFixed","scales","x","type","display","text","color","font","size","weight","padding","top","bottom","grid","ticks","callback","value","index","values","time","data","minutes","parseInt","split","y"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js"],"sourcesContent":["const options = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    tooltip: {\n      enabled: true,\n      mode: \"index\",\n      intersect: false,\n      backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n      titleColor: \"#fff\",\n      bodyColor: \"#fff\",\n      borderColor: \"#fff\",\n      borderWidth: 1,\n      displayColors: false,\n      callbacks: {\n        title: () => \"\",\n        label: (context) => {\n          const price = context.raw.toFixed(2);\n          return `$${price}`;\n        },\n      },\n    },\n  },\n  scales: {\n    x: {\n      type: \"category\",\n      title: {\n        display: true,\n        text: \"Time\",\n        color: \"#666\",\n        font: {\n          size: 14,\n          weight: \"bold\",\n        },\n        padding: { top: 10, bottom: 10 },\n      },\n      grid: {\n        display: false,\n      },\n      ticks: {\n        color: \"#666\",\n        font: {\n          size: 12,\n        },\n        // Filter the labels to show only every 15 minutes\n        callback: (value, index, values) => {\n          // Assuming the labels are in the format \"HH:MM\"\n          const time = data[index].time;\n          const minutes = parseInt(time.split(\":\")[1], 10);\n          return minutes % 15 === 0 ? time : null;\n        },\n      },\n    },\n    y: {\n      type: \"linear\",\n      title: {\n        display: true,\n        text: \"Price (USD)\",\n        color: \"#666\",\n        font: {\n          size: 14,\n          weight: \"bold\",\n        },\n        padding: { top: 0, bottom: 10 },\n      },\n      grid: {\n        color: \"#eee\",\n      },\n      ticks: {\n        color: \"#666\",\n        font: {\n          size: 12,\n        },\n      },\n    },\n  },\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACdC,UAAU,EAAE,IAAI;EAChBC,mBAAmB,EAAE,KAAK;EAC1BC,OAAO,EAAE;IACPC,OAAO,EAAE;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE,KAAK;MAChBC,eAAe,EAAE,oBAAoB;MACrCC,UAAU,EAAE,MAAM;MAClBC,SAAS,EAAE,MAAM;MACjBC,WAAW,EAAE,MAAM;MACnBC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,KAAK;MACpBC,SAAS,EAAE;QACTC,KAAK,EAAEA,CAAA,KAAM,EAAE;QACfC,KAAK,EAAGC,OAAO,IAAK;UAClB,MAAMC,KAAK,GAAGD,OAAO,CAACE,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;UACpC,OAAO,IAAIF,KAAK,EAAE;QACpB;MACF;IACF;EACF,CAAC;EACDG,MAAM,EAAE;IACNC,CAAC,EAAE;MACDC,IAAI,EAAE,UAAU;MAChBR,KAAK,EAAE;QACLS,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE;UACJC,IAAI,EAAE,EAAE;UACRC,MAAM,EAAE;QACV,CAAC;QACDC,OAAO,EAAE;UAAEC,GAAG,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAG;MACjC,CAAC;MACDC,IAAI,EAAE;QACJT,OAAO,EAAE;MACX,CAAC;MACDU,KAAK,EAAE;QACLR,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE;UACJC,IAAI,EAAE;QACR,CAAC;QACD;QACAO,QAAQ,EAAEA,CAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;UAClC;UACA,MAAMC,IAAI,GAAGC,IAAI,CAACH,KAAK,CAAC,CAACE,IAAI;UAC7B,MAAME,OAAO,GAAGC,QAAQ,CAACH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAChD,OAAOF,OAAO,GAAG,EAAE,KAAK,CAAC,GAAGF,IAAI,GAAG,IAAI;QACzC;MACF;IACF,CAAC;IACDK,CAAC,EAAE;MACDrB,IAAI,EAAE,QAAQ;MACdR,KAAK,EAAE;QACLS,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,aAAa;QACnBC,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE;UACJC,IAAI,EAAE,EAAE;UACRC,MAAM,EAAE;QACV,CAAC;QACDC,OAAO,EAAE;UAAEC,GAAG,EAAE,CAAC;UAAEC,MAAM,EAAE;QAAG;MAChC,CAAC;MACDC,IAAI,EAAE;QACJP,KAAK,EAAE;MACT,CAAC;MACDQ,KAAK,EAAE;QACLR,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE;UACJC,IAAI,EAAE;QACR;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}