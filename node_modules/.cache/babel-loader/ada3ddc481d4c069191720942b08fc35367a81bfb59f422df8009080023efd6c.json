{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"./App.css\";import axios from\"axios\";import SearchBar from\"./SearchBar\";import StockChart from\"./StockChart\";import Parameters from\"./Parameters\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[selectedTicker,setSelectedTicker]=useState(null);const[stockData,setStockData]=useState([]);const[drift,setDrift]=useState(0.0002);const[volatility,setVolatility]=useState(0.05);const[error,setError]=useState(null);// Fetch stock data when the selected ticker changes\nuseEffect(()=>{let intervalId;const fetchStockData=async()=>{try{const response=await axios.get(`http://localhost:5001/api/stock/${selectedTicker}`);console.log(\"Fetched new data:\",response.data.prices);// Log the fetched data in the console\nsetStockData(response.data.prices);// Replace old data with new data\nsetError(null);}catch(err){setError(\"Failed to fetch stock data. Please check the backend server.\");console.error(err);}};if(selectedTicker){fetchStockData();// Fetch data immediately when ticker is selected\nintervalId=setInterval(fetchStockData,60000);// Fetch data every minute\n}return()=>{if(intervalId){clearInterval(intervalId);// Clear when the ticker name is changed\n}};},[selectedTicker]);const handleParameterUpdate=async(newDrift,newVolatility)=>{try{// Log the updated parameters\nconsole.log(\"Updating parameters:\",{drift:newDrift,volatility:newVolatility});// Send the updated parameters to the backend\nconst response=await axios.post(`http://localhost:5001/api/stock/${selectedTicker}/parameters`,{drift:newDrift,volatility:newVolatility});// Log the backend response in the console\nconsole.log(\"Backend response:\",response.data);// Update with the new parameters\nsetDrift(newDrift);setVolatility(newVolatility);// Send a success message \nconsole.log(\"Parameters updated successfully!\");}catch(err){setError(\"Failed to update parameters. Please check the backend server.\");console.error(\"Error updating parameters:\",err);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",style:{textAlign:\"center\"},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-section\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Real-Time Stock Prices\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"A web app by Hamzah Muhammad\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"(t+1) stock price calculated using the GBM Formula\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Select a Stock Ticker to get started\"}),/*#__PURE__*/_jsx(SearchBar,{onSelectTicker:setSelectedTicker}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\"},children:error})]}),selectedTicker&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"stock-chart-container\",children:/*#__PURE__*/_jsx(StockChart,{data:stockData})}),/*#__PURE__*/_jsx(\"div\",{className:\"parameters-section\",style:{textAlign:\"center\"},children:/*#__PURE__*/_jsx(Parameters,{drift:drift,volatility:volatility,onUpdate:handleParameterUpdate})})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","SearchBar","StockChart","Parameters","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","selectedTicker","setSelectedTicker","stockData","setStockData","drift","setDrift","volatility","setVolatility","error","setError","intervalId","fetchStockData","response","get","console","log","data","prices","err","setInterval","clearInterval","handleParameterUpdate","newDrift","newVolatility","post","className","style","textAlign","children","onSelectTicker","color","onUpdate"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport SearchBar from \"./SearchBar\";\nimport StockChart from \"./StockChart\";\nimport Parameters from \"./Parameters\";\n\nfunction App() {\n  const [selectedTicker, setSelectedTicker] = useState(null);\n  const [stockData, setStockData] = useState([]);\n  const [drift, setDrift] = useState(0.0002);\n  const [volatility, setVolatility] = useState(0.05);\n  const [error, setError] = useState(null);\n\n  // Fetch stock data when the selected ticker changes\n  useEffect(() => {\n    let intervalId;\n\n    const fetchStockData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/stock/${selectedTicker}`);\n        console.log(\"Fetched new data:\", response.data.prices); // Log the fetched data in the console\n        setStockData(response.data.prices);                     // Replace old data with new data\n        setError(null);\n      } catch (err) {\n        setError(\"Failed to fetch stock data. Please check the backend server.\");\n        console.error(err);\n      }\n    };\n\n    if (selectedTicker) {\n      fetchStockData();                                        // Fetch data immediately when ticker is selected\n      intervalId = setInterval(fetchStockData, 60000);         // Fetch data every minute\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);                             // Clear when the ticker name is changed\n      }\n    };\n  }, [selectedTicker]);\n\n  const handleParameterUpdate = async (newDrift, newVolatility) => {\n    try {\n      // Log the updated parameters\n      console.log(\"Updating parameters:\", {\n        drift: newDrift,\n        volatility: newVolatility,\n      });\n  \n      // Send the updated parameters to the backend\n      const response = await axios.post(`http://localhost:5001/api/stock/${selectedTicker}/parameters`, {\n        drift: newDrift,\n        volatility: newVolatility,\n      });\n  \n      // Log the backend response in the console\n      console.log(\"Backend response:\", response.data);\n  \n      // Update with the new parameters\n      setDrift(newDrift);\n      setVolatility(newVolatility);\n  \n      // Send a success message \n      console.log(\"Parameters updated successfully!\");\n    } catch (err) {\n      setError(\"Failed to update parameters. Please check the backend server.\");\n      console.error(\"Error updating parameters:\", err);\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\" }}>\n      <div className=\"header-section\">\n        <h1>Real-Time Stock Prices</h1>\n        <h5>A web app by Hamzah Muhammad</h5>\n        <h5>(t+1) stock price calculated using the GBM Formula</h5>\n        <h2>Select a Stock Ticker to get started</h2>\n        <SearchBar onSelectTicker={setSelectedTicker} />\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\n      </div>\n\n      {selectedTicker && (\n        <>\n          <div className=\"stock-chart-container\">\n            <StockChart data={stockData} />\n          </div>\n          <div className=\"parameters-section\" style={{ textAlign: \"center\" }}>\n            <Parameters\n              drift={drift}\n              volatility={volatility}\n              onUpdate={handleParameterUpdate}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}