{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\nfunction StockChart({\n  data,\n  ticker\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartData = {\n    labels: data.map(p => p.time),\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(p => p.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      borderWidth: 2,\n      pointRadius: 3,\n      pointHoverRadius: 5,\n      fill: false\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        titleColor: \"#fff\",\n        bodyColor: \"#fff\",\n        borderColor: \"#fff\",\n        borderWidth: 1,\n        displayColors: false,\n        callbacks: {\n          title: context => {\n            const time = context[0].label;\n            const [hours, minutes] = time.split(':');\n            return `${hours}:${minutes}`; // Format as \"9:30\"\n          },\n          label: context => {\n            const price = context.parsed.y.toFixed(2); // Remove the second from the time\n            return `$${price}`;\n          }\n        }\n      },\n      legend: {\n        display: false\n      }\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Time',\n          // X axis label \n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: {\n            top: 10,\n            bottom: 10\n          }\n        },\n        ticks: {\n          callback: (value, index) => {\n            var _data$index;\n            // Only want the x-axis to display in 15 minute intervals \n            const time = (_data$index = data[index]) === null || _data$index === void 0 ? void 0 : _data$index.time;\n            if (!time) return undefined;\n            const [hours, minutes] = time.split(':');\n            return parseInt(minutes) % 15 === 0 ? `${hours}:${minutes}` : undefined;\n          },\n          autoSkip: false,\n          maxRotation: 0,\n          minRotation: 0,\n          color: '#666',\n          font: {\n            size: 12\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)',\n          // Y axis label\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: {\n            top: 0,\n            bottom: 10\n          }\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 12\n          }\n        },\n        grid: {\n          color: '#eee'\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const chartInstance = chartRef.current;\n    return () => {\n      if (chartInstance) chartInstance.destroy();\n    };\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"400px\",\n      border: \"1px solid #ddd\",\n      borderRadius: \"8px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: chartData,\n      options: options\n    }, ticker, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(StockChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useRef","Line","Chart","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","jsxDEV","_jsxDEV","register","StockChart","data","ticker","_s","chartRef","chartData","labels","map","p","time","datasets","label","price","borderColor","borderWidth","pointRadius","pointHoverRadius","fill","options","responsive","maintainAspectRatio","plugins","tooltip","enabled","mode","intersect","backgroundColor","titleColor","bodyColor","displayColors","callbacks","title","context","hours","minutes","split","parsed","y","toFixed","legend","display","scales","x","type","text","color","font","size","weight","padding","top","bottom","ticks","callback","value","index","_data$index","undefined","parseInt","autoSkip","maxRotation","minRotation","grid","chartInstance","current","destroy","style","width","height","border","borderRadius","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\n\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\n\nfunction StockChart({ data, ticker }) {\n  const chartRef = useRef(null);\n\n  const chartData = {\n    labels: data.map(p => p.time),\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(p => p.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      borderWidth: 2,\n      pointRadius: 3,\n      pointHoverRadius: 5,\n      fill: false\n    }]\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        titleColor: \"#fff\",\n        bodyColor: \"#fff\",\n        borderColor: \"#fff\",\n        borderWidth: 1,\n        displayColors: false,\n        callbacks: {\n          title: (context) => {\n            const time = context[0].label;\n            const [hours, minutes] = time.split(':');\n            return `${hours}:${minutes}`; // Format as \"9:30\"\n          },\n          label: (context) => {\n            const price = context.parsed.y.toFixed(2); // Remove the second from the time\n            return `$${price}`;\n          }\n        }\n      },\n      legend: {\n        display: false\n      }\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Time',  // X axis label \n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: { top: 10, bottom: 10 }\n        },\n        ticks: {\n          callback: (value, index) => {     // Only want the x-axis to display in 15 minute intervals \n            const time = data[index]?.time;\n            if (!time) return undefined;\n            const [hours, minutes] = time.split(':');\n            return parseInt(minutes) % 15 === 0 ? `${hours}:${minutes}` : undefined;\n          },\n          autoSkip: false,\n          maxRotation: 0,\n          minRotation: 0,\n          color: '#666',\n          font: {\n            size: 12\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)', // Y axis label\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: { top: 0, bottom: 10 }\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 12\n          }\n        },\n        grid: {\n          color: '#eee'\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const chartInstance = chartRef.current;\n    return () => {\n      if (chartInstance) chartInstance.destroy();\n    };\n  }, [ticker]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"400px\", border: \"1px solid #ddd\", borderRadius: \"8px\", }}>\n      <Line \n        ref={chartRef}\n        data={chartData}\n        options={options}\n        key={ticker}\n      />\n    </div>\n  );\n}\n\nexport default StockChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}