{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\n\n// Register the required scales, elements, and plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\nfunction StockChart({\n  data\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartData = {\n    labels: data.map(point => point.time),\n    // Use all time labels\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(point => point.price),\n      // Use all price data\n      borderColor: \"rgba(75,192,192,1)\",\n      fill: false\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        titleColor: \"#fff\",\n        bodyColor: \"#fff\",\n        borderColor: \"#fff\",\n        borderWidth: 1,\n        displayColors: false,\n        callbacks: {\n          title: () => \"\",\n          // No title\n          label: context => {\n            const time = data[context.dataIndex].time; // Get the time for the hovered point\n            const price = context.raw.toFixed(2); // Get the price for the hovered point\n            return `Time: ${time}, Price: $${price}`; // Display both time and price\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: \"category\",\n        title: {\n          display: true,\n          text: \"Time\",\n          color: \"#666\",\n          font: {\n            size: 14,\n            weight: \"bold\"\n          },\n          padding: {\n            top: 10,\n            bottom: 10\n          }\n        },\n        grid: {\n          display: false\n        },\n        ticks: {\n          color: \"#666\",\n          font: {\n            size: 12\n          },\n          // Show labels only every 15 minutes\n          callback: (value, index, values) => {\n            const time = data[index].time;\n            const minutes = parseInt(time.split(\":\")[1], 10);\n            return minutes % 15 === 0 ? time : null; // Show label only if minutes are divisible by 15\n          }\n        }\n      },\n      y: {\n        type: \"linear\",\n        title: {\n          display: true,\n          text: \"Price (USD)\",\n          color: \"#666\",\n          font: {\n            size: 14,\n            weight: \"bold\"\n          },\n          padding: {\n            top: 0,\n            bottom: 10\n          }\n        },\n        grid: {\n          color: \"#eee\"\n        },\n        ticks: {\n          color: \"#666\",\n          font: {\n            size: 12\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(StockChart, \"aW/6lq35noP8VJrK3G9P8gm4OYM=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useRef","Line","Chart","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","jsxDEV","_jsxDEV","register","StockChart","data","_s","chartRef","chartData","labels","map","point","time","datasets","label","price","borderColor","fill","options","responsive","maintainAspectRatio","plugins","tooltip","enabled","mode","intersect","backgroundColor","titleColor","bodyColor","borderWidth","displayColors","callbacks","title","context","dataIndex","raw","toFixed","scales","x","type","display","text","color","font","size","weight","padding","top","bottom","grid","ticks","callback","value","index","values","minutes","parseInt","split","y","style","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\n\n// Register the required scales, elements, and plugins\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\n\nfunction StockChart({ data }) {\n  const chartRef = useRef(null);\n\n  const chartData = {\n    labels: data.map((point) => point.time), // Use all time labels\n    datasets: [\n      {\n        label: \"Stock Price\",\n        data: data.map((point) => point.price), // Use all price data\n        borderColor: \"rgba(75,192,192,1)\",\n        fill: false,\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        titleColor: \"#fff\",\n        bodyColor: \"#fff\",\n        borderColor: \"#fff\",\n        borderWidth: 1,\n        displayColors: false,\n        callbacks: {\n          title: () => \"\", // No title\n          label: (context) => {\n            const time = data[context.dataIndex].time; // Get the time for the hovered point\n            const price = context.raw.toFixed(2); // Get the price for the hovered point\n            return `Time: ${time}, Price: $${price}`; // Display both time and price\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        type: \"category\",\n        title: {\n          display: true,\n          text: \"Time\",\n          color: \"#666\",\n          font: {\n            size: 14,\n            weight: \"bold\",\n          },\n          padding: { top: 10, bottom: 10 },\n        },\n        grid: {\n          display: false,\n        },\n        ticks: {\n          color: \"#666\",\n          font: {\n            size: 12,\n          },\n          // Show labels only every 15 minutes\n          callback: (value, index, values) => {\n            const time = data[index].time;\n            const minutes = parseInt(time.split(\":\")[1], 10);\n            return minutes % 15 === 0 ? time : null; // Show label only if minutes are divisible by 15\n          },\n        },\n      },\n      y: {\n        type: \"linear\",\n        title: {\n          display: true,\n          text: \"Price (USD)\",\n          color: \"#666\",\n          font: {\n            size: 14,\n            weight: \"bold\",\n          },\n          padding: { top: 0, bottom: 10 },\n        },\n        grid: {\n          color: \"#eee\",\n        },\n        ticks: {\n          color: \"#666\",\n          font: {\n            size: 12,\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: \"100%\", height: \"400px\" }}>\n      <Line ref={chartRef} data={chartData} options={options} />\n    </div>\n  );\n}\n\nexport default StockChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}