{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\nfunction StockChart({\n  initialData\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const [data, setData] = useState(initialData);\n\n  // Simulate real-time updates every minute\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newTime = new Date();\n      const hours = newTime.getHours().toString().padStart(2, \"0\");\n      const minutes = newTime.getMinutes().toString().padStart(2, \"0\");\n      const timeLabel = `${hours}:${minutes}`; // Format as \"HH:MM\" (no AM/PM)\n\n      const newDataPoint = {\n        time: timeLabel,\n        price: Math.random() * 100 // Replace with real data\n      };\n      setData(prevData => [...prevData, newDataPoint]);\n    }, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Format x-axis labels: show only every 15 minutes (e.g., \"09:30\", \"09:45\")\n  const formatXAxisLabels = () => {\n    return data.map(point => {\n      const [hours, minutes] = point.time.split(\":\");\n      return parseInt(minutes) % 15 === 0 ? point.time : \"\";\n    });\n  };\n  const chartData = {\n    labels: data.map(point => point.time),\n    // All times (for tooltips)\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(point => point.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      fill: false\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: tooltipItems => tooltipItems[0].label,\n          // Show full time in tooltip\n          label: context => `$${context.raw.toFixed(2)}`\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: \"category\",\n        ticks: {\n          callback: (value, index) => {\n            const [hours, minutes] = data[index].time.split(\":\");\n            return parseInt(minutes) % 15 === 0 ? `${hours}:${minutes}` : null;\n          },\n          maxRotation: 0,\n          autoSkip: false\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          text: \"Price (USD)\"\n        },\n        grid: {\n          color: \"#eee\"\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(StockChart, \"TlMSMcrN39FXksPJ3sOVpfunDrY=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Line","Chart","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","jsxDEV","_jsxDEV","register","StockChart","initialData","_s","chartRef","data","setData","interval","setInterval","newTime","Date","hours","getHours","toString","padStart","minutes","getMinutes","timeLabel","newDataPoint","time","price","Math","random","prevData","clearInterval","formatXAxisLabels","map","point","split","parseInt","chartData","labels","datasets","label","borderColor","fill","options","responsive","maintainAspectRatio","plugins","tooltip","callbacks","title","tooltipItems","context","raw","toFixed","scales","x","type","ticks","callback","value","index","maxRotation","autoSkip","grid","display","y","text","color","style","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\n\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\n\nfunction StockChart({ initialData }) {\n  const chartRef = useRef(null);\n  const [data, setData] = useState(initialData);\n\n  // Simulate real-time updates every minute\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newTime = new Date();\n      const hours = newTime.getHours().toString().padStart(2, \"0\");\n      const minutes = newTime.getMinutes().toString().padStart(2, \"0\");\n      const timeLabel = `${hours}:${minutes}`; // Format as \"HH:MM\" (no AM/PM)\n\n      const newDataPoint = {\n        time: timeLabel,\n        price: Math.random() * 100, // Replace with real data\n      };\n\n      setData((prevData) => [...prevData, newDataPoint]);\n    }, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Format x-axis labels: show only every 15 minutes (e.g., \"09:30\", \"09:45\")\n  const formatXAxisLabels = () => {\n    return data.map((point) => {\n      const [hours, minutes] = point.time.split(\":\");\n      return parseInt(minutes) % 15 === 0 ? point.time : \"\";\n    });\n  };\n\n  const chartData = {\n    labels: data.map((point) => point.time), // All times (for tooltips)\n    datasets: [\n      {\n        label: \"Stock Price\",\n        data: data.map((point) => point.price),\n        borderColor: \"rgba(75,192,192,1)\",\n        fill: false,\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: (tooltipItems) => tooltipItems[0].label, // Show full time in tooltip\n          label: (context) => `$${context.raw.toFixed(2)}`,\n        },\n      },\n    },\n    scales: {\n      x: {\n        type: \"category\",\n        ticks: {\n          callback: (value, index) => {\n            const [hours, minutes] = data[index].time.split(\":\");\n            return parseInt(minutes) % 15 === 0 ? `${hours}:${minutes}` : null;\n          },\n          maxRotation: 0,\n          autoSkip: false,\n        },\n        grid: { display: false },\n      },\n      y: {\n        title: { text: \"Price (USD)\" },\n        grid: { color: \"#eee\" },\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: \"100%\", height: \"400px\" }}>\n      <Line ref={chartRef} data={chartData} options={options} />\n    </div>\n  );\n}\n\nexport default StockChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjGP,KAAK,CAACQ,QAAQ,CAACP,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,OAAO,CAAC;AAE9E,SAASI,UAAUA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACY,WAAW,CAAC;;EAE7C;EACAd,SAAS,CAAC,MAAM;IACd,MAAMmB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC1B,MAAMC,KAAK,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC5D,MAAMC,OAAO,GAAGN,OAAO,CAACO,UAAU,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAChE,MAAMG,SAAS,GAAG,GAAGN,KAAK,IAAII,OAAO,EAAE,CAAC,CAAC;;MAEzC,MAAMG,YAAY,GAAG;QACnBC,IAAI,EAAEF,SAAS;QACfG,KAAK,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAE;MAC9B,CAAC;MAEDhB,OAAO,CAAEiB,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEL,YAAY,CAAC,CAAC;IACpD,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMM,aAAa,CAACjB,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMkB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,OAAOpB,IAAI,CAACqB,GAAG,CAAEC,KAAK,IAAK;MACzB,MAAM,CAAChB,KAAK,EAAEI,OAAO,CAAC,GAAGY,KAAK,CAACR,IAAI,CAACS,KAAK,CAAC,GAAG,CAAC;MAC9C,OAAOC,QAAQ,CAACd,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAGY,KAAK,CAACR,IAAI,GAAG,EAAE;IACvD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMW,SAAS,GAAG;IAChBC,MAAM,EAAE1B,IAAI,CAACqB,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACR,IAAI,CAAC;IAAE;IACzCa,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,aAAa;MACpB5B,IAAI,EAAEA,IAAI,CAACqB,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACP,KAAK,CAAC;MACtCc,WAAW,EAAE,oBAAoB;MACjCC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,OAAO,EAAE;QACPC,SAAS,EAAE;UACTC,KAAK,EAAGC,YAAY,IAAKA,YAAY,CAAC,CAAC,CAAC,CAACV,KAAK;UAAE;UAChDA,KAAK,EAAGW,OAAO,IAAK,IAAIA,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;QAChD;MACF;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE;UACLC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,KAAK,KAAK;YAC1B,MAAM,CAAC1C,KAAK,EAAEI,OAAO,CAAC,GAAGV,IAAI,CAACgD,KAAK,CAAC,CAAClC,IAAI,CAACS,KAAK,CAAC,GAAG,CAAC;YACpD,OAAOC,QAAQ,CAACd,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,GAAGJ,KAAK,IAAII,OAAO,EAAE,GAAG,IAAI;UACpE,CAAC;UACDuC,WAAW,EAAE,CAAC;UACdC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAE;UAAEC,OAAO,EAAE;QAAM;MACzB,CAAC;MACDC,CAAC,EAAE;QACDhB,KAAK,EAAE;UAAEiB,IAAI,EAAE;QAAc,CAAC;QAC9BH,IAAI,EAAE;UAAEI,KAAK,EAAE;QAAO;MACxB;IACF;EACF,CAAC;EAED,oBACE7D,OAAA;IAAK8D,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAC7CjE,OAAA,CAACR,IAAI;MAAC0E,GAAG,EAAE7D,QAAS;MAACC,IAAI,EAAEyB,SAAU;MAACM,OAAO,EAAEA;IAAQ;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV;AAAClE,EAAA,CA/EQF,UAAU;AAAAqE,EAAA,GAAVrE,UAAU;AAiFnB,eAAeA,UAAU;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}