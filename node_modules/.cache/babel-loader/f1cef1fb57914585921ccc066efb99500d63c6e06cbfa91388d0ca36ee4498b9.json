{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\nfunction StockChart({\n  data,\n  ticker\n}) {\n  _s();\n  const chartRef = useRef(null);\n\n  // Time formatting Function\n  const formatTimeWithAMPM = timeString => {\n    if (!timeString) return '';\n\n    // Extract time parts\n    const timeParts = timeString.split(' ');\n    let [hours, minutes] = timeParts[0].split(':');\n    let hourNum = parseInt(hours, 10);\n    let ampm = timeParts[1] || '';\n\n    // If already has AM/PM, verify it's correct\n    if (ampm) {\n      const shouldBePM = hourNum >= 12 && hourNum < 24;\n      if (shouldBePM && ampm === 'AM' || !shouldBePM && ampm === 'PM') {\n        // Fix incorrect AM/PM\n        ampm = shouldBePM ? 'PM' : 'AM';\n      }\n    } else {\n      // Determine AM/PM for 24-hour format\n      ampm = hourNum >= 12 && hourNum < 24 ? 'PM' : 'AM';\n    }\n    hourNum = hourNum % 12 || 12; // Convert 0 or 24 to 12\n\n    return `${hourNum}:${minutes} ${ampm}`;\n  };\n  const chartData = {\n    labels: data.map(p => p.time),\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(p => p.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      borderWidth: 2,\n      pointRadius: 3,\n      pointHoverRadius: 5,\n      fill: false\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        titleColor: \"#fff\",\n        bodyColor: \"#fff\",\n        borderColor: \"#fff\",\n        borderWidth: 1,\n        displayColors: false,\n        callbacks: {\n          title: context => formatTimeWithAMPM(context[0].label),\n          label: context => `$${context.parsed.y.toFixed(2)}` //Fixed to 2 decimal places\n        }\n      },\n      legend: {\n        display: false\n      }\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Time (EST)',\n          // X axis label\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: {\n            top: 10,\n            bottom: 10\n          }\n        },\n        ticks: {\n          callback: (value, index) => {\n            var _data$index;\n            const time = (_data$index = data[index]) === null || _data$index === void 0 ? void 0 : _data$index.time;\n            if (!time) return undefined;\n            const formattedTime = formatTimeWithAMPM(time);\n            const minutes = time.includes(':') ? time.split(':')[1].split(' ')[0] : '00';\n            return parseInt(minutes) % 15 === 0 ? formattedTime : undefined; // Only show every 15 minutes on the X axis \n          },\n          // Not neccessary but 1 minute charts usually \n          autoSkip: false,\n          // display 15m intervals on the x-axis \n          maxRotation: 0,\n          minRotation: 0,\n          color: '#666',\n          font: {\n            size: 8\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)',\n          // Y axis label\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: {\n            top: 0,\n            bottom: 10\n          }\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 12\n          }\n        },\n        grid: {\n          color: '#eee'\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const chartInstance = chartRef.current;\n    return () => {\n      if (chartInstance) chartInstance.destroy();\n    };\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-chart-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stock-chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        ref: chartRef,\n        data: chartData,\n        options: options\n      }, ticker, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(StockChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useRef","Line","Chart","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","jsxDEV","_jsxDEV","register","StockChart","data","ticker","_s","chartRef","formatTimeWithAMPM","timeString","timeParts","split","hours","minutes","hourNum","parseInt","ampm","shouldBePM","chartData","labels","map","p","time","datasets","label","price","borderColor","borderWidth","pointRadius","pointHoverRadius","fill","options","responsive","maintainAspectRatio","plugins","tooltip","enabled","mode","intersect","backgroundColor","titleColor","bodyColor","displayColors","callbacks","title","context","parsed","y","toFixed","legend","display","scales","x","type","text","color","font","size","weight","padding","top","bottom","ticks","callback","value","index","_data$index","undefined","formattedTime","includes","autoSkip","maxRotation","minRotation","grid","chartInstance","current","destroy","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\n\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\n\nfunction StockChart({ data, ticker }) {\n  const chartRef = useRef(null);\n\n  // Time formatting Function\n  const formatTimeWithAMPM = (timeString) => {\n    if (!timeString) return '';\n    \n    // Extract time parts\n    const timeParts = timeString.split(' ');\n    let [hours, minutes] = timeParts[0].split(':');\n    let hourNum = parseInt(hours, 10);\n    let ampm = timeParts[1] || '';\n    \n    // If already has AM/PM, verify it's correct\n    if (ampm) {\n      const shouldBePM = hourNum >= 12 && hourNum < 24;\n      if ((shouldBePM && ampm === 'AM') || (!shouldBePM && ampm === 'PM')) {\n        // Fix incorrect AM/PM\n        ampm = shouldBePM ? 'PM' : 'AM';\n      }\n    } else {\n      // Determine AM/PM for 24-hour format\n      ampm = hourNum >= 12 && hourNum < 24 ? 'PM' : 'AM';\n    }\n    \n    hourNum = hourNum % 12 || 12; // Convert 0 or 24 to 12\n    \n    return `${hourNum}:${minutes} ${ampm}`;\n  };\n\n  const chartData = {\n    labels: data.map(p => p.time),\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(p => p.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      borderWidth: 2,\n      pointRadius: 3,\n      pointHoverRadius: 5,\n      fill: false\n    }]\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        titleColor: \"#fff\",\n        bodyColor: \"#fff\",\n        borderColor: \"#fff\",\n        borderWidth: 1,\n        displayColors: false,\n        callbacks: {\n          title: (context) => formatTimeWithAMPM(context[0].label),\n          label: (context) => `$${context.parsed.y.toFixed(2)}`     //Fixed to 2 decimal places\n        }\n      },\n      legend: {\n        display: false\n      }\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Time (EST)', // X axis label\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: { top: 10, bottom: 10 }\n        },\n        ticks: {\n          callback: (value, index) => {\n            const time = data[index]?.time;\n            if (!time) return undefined;\n            const formattedTime = formatTimeWithAMPM(time);\n            const minutes = time.includes(':') ? time.split(':')[1].split(' ')[0] : '00';\n            return parseInt(minutes) % 15 === 0 ? formattedTime : undefined; // Only show every 15 minutes on the X axis \n          },                                                                 // Not neccessary but 1 minute charts usually \n          autoSkip: false,                                                   // display 15m intervals on the x-axis \n          maxRotation: 0,\n          minRotation: 0,\n          color: '#666',\n          font: {\n            size: 8,\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)', // Y axis label\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          },\n          padding: { top: 0, bottom: 10 }\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 12\n          }\n        },\n        grid: {\n          color: '#eee'\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const chartInstance = chartRef.current;\n    return () => {\n      if (chartInstance) chartInstance.destroy();\n    };\n  }, [ticker]);\n\n  return (\n    <div className=\"stock-chart-container\">\n      <div className=\"stock-chart-wrapper\">\n        <Line \n          ref={chartRef}\n          data={chartData}\n          options={options}\n          key={ticker}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default StockChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjGP,KAAK,CAACQ,QAAQ,CAACP,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,OAAO,CAAC;AAE9E,SAASI,UAAUA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAMC,QAAQ,GAAGf,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAMgB,kBAAkB,GAAIC,UAAU,IAAK;IACzC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;;IAE1B;IACA,MAAMC,SAAS,GAAGD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;IACvC,IAAI,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;IAC9C,IAAIG,OAAO,GAAGC,QAAQ,CAACH,KAAK,EAAE,EAAE,CAAC;IACjC,IAAII,IAAI,GAAGN,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE;;IAE7B;IACA,IAAIM,IAAI,EAAE;MACR,MAAMC,UAAU,GAAGH,OAAO,IAAI,EAAE,IAAIA,OAAO,GAAG,EAAE;MAChD,IAAKG,UAAU,IAAID,IAAI,KAAK,IAAI,IAAM,CAACC,UAAU,IAAID,IAAI,KAAK,IAAK,EAAE;QACnE;QACAA,IAAI,GAAGC,UAAU,GAAG,IAAI,GAAG,IAAI;MACjC;IACF,CAAC,MAAM;MACL;MACAD,IAAI,GAAGF,OAAO,IAAI,EAAE,IAAIA,OAAO,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;IACpD;IAEAA,OAAO,GAAGA,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE9B,OAAO,GAAGA,OAAO,IAAID,OAAO,IAAIG,IAAI,EAAE;EACxC,CAAC;EAED,MAAME,SAAS,GAAG;IAChBC,MAAM,EAAEf,IAAI,CAACgB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;IAC7BC,QAAQ,EAAE,CAAC;MACTC,KAAK,EAAE,aAAa;MACpBpB,IAAI,EAAEA,IAAI,CAACgB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACI,KAAK,CAAC;MAC5BC,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE,CAAC;MACdC,gBAAgB,EAAE,CAAC;MACnBC,IAAI,EAAE;IACR,CAAC;EACH,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,OAAO,EAAE;QACPC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,KAAK;QAChBC,eAAe,EAAE,oBAAoB;QACrCC,UAAU,EAAE,MAAM;QAClBC,SAAS,EAAE,MAAM;QACjBf,WAAW,EAAE,MAAM;QACnBC,WAAW,EAAE,CAAC;QACde,aAAa,EAAE,KAAK;QACpBC,SAAS,EAAE;UACTC,KAAK,EAAGC,OAAO,IAAKrC,kBAAkB,CAACqC,OAAO,CAAC,CAAC,CAAC,CAACrB,KAAK,CAAC;UACxDA,KAAK,EAAGqB,OAAO,IAAK,IAAIA,OAAO,CAACC,MAAM,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAK;QAC5D;MACF,CAAC;MACDC,MAAM,EAAE;QACNC,OAAO,EAAE;MACX;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,UAAU;QAChBT,KAAK,EAAE;UACLM,OAAO,EAAE,IAAI;UACbI,IAAI,EAAE,YAAY;UAAE;UACpBC,KAAK,EAAE,MAAM;UACbC,IAAI,EAAE;YACJC,IAAI,EAAE,EAAE;YACRC,MAAM,EAAE;UACV,CAAC;UACDC,OAAO,EAAE;YAAEC,GAAG,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAG;QACjC,CAAC;QACDC,KAAK,EAAE;UACLC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,KAAK,KAAK;YAAA,IAAAC,WAAA;YAC1B,MAAM5C,IAAI,IAAA4C,WAAA,GAAG9D,IAAI,CAAC6D,KAAK,CAAC,cAAAC,WAAA,uBAAXA,WAAA,CAAa5C,IAAI;YAC9B,IAAI,CAACA,IAAI,EAAE,OAAO6C,SAAS;YAC3B,MAAMC,aAAa,GAAG5D,kBAAkB,CAACc,IAAI,CAAC;YAC9C,MAAMT,OAAO,GAAGS,IAAI,CAAC+C,QAAQ,CAAC,GAAG,CAAC,GAAG/C,IAAI,CAACX,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;YAC5E,OAAOI,QAAQ,CAACF,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAGuD,aAAa,GAAGD,SAAS,CAAC,CAAC;UACnE,CAAC;UAAkE;UACnEG,QAAQ,EAAE,KAAK;UAAoD;UACnEC,WAAW,EAAE,CAAC;UACdC,WAAW,EAAE,CAAC;UACdjB,KAAK,EAAE,MAAM;UACbC,IAAI,EAAE;YACJC,IAAI,EAAE;UACR;QACF,CAAC;QACDgB,IAAI,EAAE;UACJvB,OAAO,EAAE;QACX;MACF,CAAC;MACDH,CAAC,EAAE;QACDH,KAAK,EAAE;UACLM,OAAO,EAAE,IAAI;UACbI,IAAI,EAAE,aAAa;UAAE;UACrBC,KAAK,EAAE,MAAM;UACbC,IAAI,EAAE;YACJC,IAAI,EAAE,EAAE;YACRC,MAAM,EAAE;UACV,CAAC;UACDC,OAAO,EAAE;YAAEC,GAAG,EAAE,CAAC;YAAEC,MAAM,EAAE;UAAG;QAChC,CAAC;QACDC,KAAK,EAAE;UACLP,KAAK,EAAE,MAAM;UACbC,IAAI,EAAE;YACJC,IAAI,EAAE;UACR;QACF,CAAC;QACDgB,IAAI,EAAE;UACJlB,KAAK,EAAE;QACT;MACF;IACF;EACF,CAAC;EAEDhE,SAAS,CAAC,MAAM;IACd,MAAMmF,aAAa,GAAGnE,QAAQ,CAACoE,OAAO;IACtC,OAAO,MAAM;MACX,IAAID,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;IAC5C,CAAC;EACH,CAAC,EAAE,CAACvE,MAAM,CAAC,CAAC;EAEZ,oBACEJ,OAAA;IAAK4E,SAAS,EAAC,uBAAuB;IAAAC,QAAA,eACpC7E,OAAA;MAAK4E,SAAS,EAAC,qBAAqB;MAAAC,QAAA,eAClC7E,OAAA,CAACR,IAAI;QACHsF,GAAG,EAAExE,QAAS;QACdH,IAAI,EAAEc,SAAU;QAChBa,OAAO,EAAEA;MAAQ,GACZ1B,MAAM;QAAA2E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC7E,EAAA,CA9IQH,UAAU;AAAAiF,EAAA,GAAVjF,UAAU;AAgJnB,eAAeA,UAAU;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}