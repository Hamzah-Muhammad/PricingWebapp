{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmuhammad/Desktop/PricingWebapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport SearchBar from \"./SearchBar\";\nimport StockChart from \"./StockChart\";\nimport Parameters from \"./Parameters\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedTicker, setSelectedTicker] = useState(null);\n  const [stockData, setStockData] = useState([]);\n  const [drift, setDrift] = useState(0.0002);\n  const [volatility, setVolatility] = useState(0.05);\n  const [error, setError] = useState(null);\n\n  // Fetch stock data when the selected ticker changes\n  useEffect(() => {\n    let intervalId;\n    const fetchStockData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/stock/${selectedTicker}`);\n        console.log(\"Fetched new data:\", response.data.prices); // Log the fetched data\n\n        // Append new data to the existing data\n        setStockData(prevData => {\n          const newData = response.data.prices;\n\n          // If the new data is empty, return the previous data\n          if (newData.length === 0) return prevData;\n\n          // Append only the latest data point (if needed)\n          const latestDataPoint = newData[newData.length - 1];\n\n          // Check if the latest data point is already in the previous data\n          const isDuplicate = prevData.some(point => point.time === latestDataPoint.time && point.price === latestDataPoint.price);\n\n          // If it's not a duplicate, append it to the previous data\n          if (!isDuplicate) {\n            return [...prevData, latestDataPoint];\n          }\n\n          // If it's a duplicate, return the previous data\n          return prevData;\n        });\n        setError(null);\n      } catch (err) {\n        setError(\"Failed to fetch stock data. Please check the backend server.\");\n        console.error(err);\n      }\n    };\n    if (selectedTicker) {\n      fetchStockData(); // Fetch data immediately when ticker is selected\n      intervalId = setInterval(fetchStockData, 60000); // Fetch data every minute\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId); // Clear the interval when the component unmounts or ticker changes\n      }\n    };\n  }, [selectedTicker]);\n  const handleParameterUpdate = async (newDrift, newVolatility) => {\n    try {\n      // Send the updated parameters to the backend\n      await axios.post(`http://localhost:5001/api/stock/${selectedTicker}/parameters`, {\n        drift: newDrift,\n        volatility: newVolatility\n      });\n\n      // Update the local state with the new parameters\n      setDrift(newDrift);\n      setVolatility(newVolatility);\n    } catch (err) {\n      setError(\"Failed to update parameters. Please check the backend server.\");\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Real-Time Stock Prices\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"A web app by Hamzah Muhammad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select a Stock Ticker to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSelectTicker: setSelectedTicker\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), selectedTicker && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-chart-container\",\n        children: /*#__PURE__*/_jsxDEV(StockChart, {\n          data: stockData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parameters-section\",\n        children: /*#__PURE__*/_jsxDEV(Parameters, {\n          drift: drift,\n          volatility: volatility,\n          onUpdate: handleParameterUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dT3TnXdl7pvWzdUSyxZ/RUMXkF0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","SearchBar","StockChart","Parameters","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedTicker","setSelectedTicker","stockData","setStockData","drift","setDrift","volatility","setVolatility","error","setError","intervalId","fetchStockData","response","get","console","log","data","prices","prevData","newData","length","latestDataPoint","isDuplicate","some","point","time","price","err","setInterval","clearInterval","handleParameterUpdate","newDrift","newVolatility","post","className","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectTicker","color","onUpdate","_c","$RefreshReg$"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport SearchBar from \"./SearchBar\";\nimport StockChart from \"./StockChart\";\nimport Parameters from \"./Parameters\";\n\nfunction App() {\n  const [selectedTicker, setSelectedTicker] = useState(null);\n  const [stockData, setStockData] = useState([]);\n  const [drift, setDrift] = useState(0.0002);\n  const [volatility, setVolatility] = useState(0.05);\n  const [error, setError] = useState(null);\n\n  // Fetch stock data when the selected ticker changes\n  useEffect(() => {\n    let intervalId;\n\n    const fetchStockData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/stock/${selectedTicker}`);\n        console.log(\"Fetched new data:\", response.data.prices); // Log the fetched data\n    \n        // Append new data to the existing data\n        setStockData((prevData) => {\n          const newData = response.data.prices;\n    \n          // If the new data is empty, return the previous data\n          if (newData.length === 0) return prevData;\n    \n          // Append only the latest data point (if needed)\n          const latestDataPoint = newData[newData.length - 1];\n    \n          // Check if the latest data point is already in the previous data\n          const isDuplicate = prevData.some(\n            (point) => point.time === latestDataPoint.time && point.price === latestDataPoint.price\n          );\n    \n          // If it's not a duplicate, append it to the previous data\n          if (!isDuplicate) {\n            return [...prevData, latestDataPoint];\n          }\n    \n          // If it's a duplicate, return the previous data\n          return prevData;\n        });\n    \n        setError(null);\n      } catch (err) {\n        setError(\"Failed to fetch stock data. Please check the backend server.\");\n        console.error(err);\n      }\n    };\n\n    if (selectedTicker) {\n      fetchStockData(); // Fetch data immediately when ticker is selected\n      intervalId = setInterval(fetchStockData, 60000); // Fetch data every minute\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId); // Clear the interval when the component unmounts or ticker changes\n      }\n    };\n  }, [selectedTicker]);\n\n  const handleParameterUpdate = async (newDrift, newVolatility) => {\n    try {\n      // Send the updated parameters to the backend\n      await axios.post(`http://localhost:5001/api/stock/${selectedTicker}/parameters`, {\n        drift: newDrift,\n        volatility: newVolatility,\n      });\n\n      // Update the local state with the new parameters\n      setDrift(newDrift);\n      setVolatility(newVolatility);\n    } catch (err) {\n      setError(\"Failed to update parameters. Please check the backend server.\");\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\" }}>\n      {/* Header section with light blue background */}\n      <div className=\"header-section\">\n        <h1>Real-Time Stock Prices</h1>\n        <h5>A web app by Hamzah Muhammad</h5>\n        <h2>Select a Stock Ticker to get started</h2>\n        <SearchBar onSelectTicker={setSelectedTicker} />\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\n      </div>\n\n      {/* Chart and Parameters section */}\n      {selectedTicker && (\n        <>\n          <div className=\"stock-chart-container\">\n            <StockChart data={stockData} />\n          </div>\n          <div className=\"parameters-section\">\n            <Parameters\n              drift={drift}\n              volatility={volatility}\n              onUpdate={handleParameterUpdate}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}