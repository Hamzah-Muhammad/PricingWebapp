{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\nfunction StockChart({\n  data,\n  ticker\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartData = {\n    labels: data.map(p => p.time),\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(p => p.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      fill: false\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {}\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Time',\n          // X-axis title\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        },\n        ticks: {\n          callback: (value, index) => {\n            var _data$index;\n            const time = (_data$index = data[index]) === null || _data$index === void 0 ? void 0 : _data$index.time;\n            if (!time) return undefined;\n\n            // Format time to show only hours and minutes\n            const [hours, minutes] = time.split(':');\n            const formattedTime = `${hours}:${minutes}`;\n\n            // Only show labels at 15-minute intervals (Since 1 minute charts usually show 15 minute intervals on the x axis)\n            return parseInt(minutes) % 15 === 0 ? formattedTime : undefined;\n          },\n          autoSkip: false,\n          maxRotation: 0,\n          minRotation: 0,\n          color: '#666'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)',\n          // Y-axis title\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        },\n        ticks: {\n          color: '#666'\n        },\n        grid: {\n          color: '#eee'\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const chartInstance = chartRef.current;\n    return () => {\n      if (chartInstance) chartInstance.destroy();\n    };\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: chartData,\n      options: options\n    }, ticker, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(StockChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useRef","Line","Chart","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","jsxDEV","_jsxDEV","register","StockChart","data","ticker","_s","chartRef","chartData","labels","map","p","time","datasets","label","price","borderColor","fill","options","responsive","maintainAspectRatio","plugins","tooltip","scales","x","type","title","display","text","color","font","size","weight","ticks","callback","value","index","_data$index","undefined","hours","minutes","split","formattedTime","parseInt","autoSkip","maxRotation","minRotation","grid","y","chartInstance","current","destroy","style","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamzahmuhammad/Desktop/PricingWebapp/src/StockChart.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip } from \"chart.js\";\n\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip);\n\nfunction StockChart({ data, ticker }) {\n  const chartRef = useRef(null);\n\n  const chartData = {\n    labels: data.map(p => p.time),\n    datasets: [{\n      label: \"Stock Price\",\n      data: data.map(p => p.price),\n      borderColor: \"rgba(75,192,192,1)\",\n      fill: false\n    }]\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n      }\n    },\n    scales: {\n      x: {\n        type: 'category',\n        title: {\n          display: true,\n          text: 'Time',  // X-axis title\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        },\n        ticks: {\n          callback: (value, index) => {\n            const time = data[index]?.time;\n            if (!time) return undefined;\n            \n            // Format time to show only hours and minutes\n            const [hours, minutes] = time.split(':');\n            const formattedTime = `${hours}:${minutes}`;\n            \n            // Only show labels at 15-minute intervals (Since 1 minute charts usually show 15 minute intervals on the x axis)\n            return parseInt(minutes) % 15 === 0 ? formattedTime : undefined;\n          },\n          autoSkip: false,\n          maxRotation: 0,\n          minRotation: 0,\n          color: '#666'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Price (USD)',  // Y-axis title\n          color: '#666',\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        },\n        ticks: {\n          color: '#666'\n        },\n        grid: {\n          color: '#eee'\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const chartInstance = chartRef.current;\n    return () => {\n      if (chartInstance) chartInstance.destroy();\n    };\n  }, [ticker]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"400px\" }}>\n      <Line \n        ref={chartRef}\n        data={chartData}\n        options={options}\n        key={ticker}\n      />\n    </div>\n  );\n}\n\nexport default StockChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}